package generate

import (
	"log"
	"strings"

	"github.com/Nyarum/diho_bytes_generate/customtypes"

	"github.com/dave/jennifer/jen"
)

func GenerateDecodeForStruct(filename, pkg string, packetDescr customtypes.PacketDescr) {
	f := jen.NewFilePathName("", pkg)

	body := []jen.Code{
		jen.Var().Id("err").Error(),
		jen.Id("reader").Op(":=").Qual("bytes", "NewReader").Call(jen.Id("buf")),
	}

	for _, field := range packetDescr.FieldsWithTypes.Keys() {
		fieldType, _ := packetDescr.FieldsWithTypes.Get(field)

		switch fieldType {
		case "uint16", "uint32", "uint64", "uint8", "int16", "int32", "int64", "int8":
			body = append(body, []jen.Code{
				jen.Err().Op("=").Qual("encoding/binary", "Read").Call(jen.Id("reader"), jen.Id("endian"), jen.Op("&").Id("p").Dot(field)),
				jen.If(jen.Err().Op("!=").Nil()).Block(
					jen.Return(jen.Err()),
				),
			}...)
		case "string":
			body = append(body, []jen.Code{
				jen.Id("p").Dot(field).Op(",").Id("err").Op("=").Qual("github.com/Nyarum/diho_bytes_generate/utils", "ReadStringNull").Call(jen.Id("reader")),
				jen.If(jen.Err().Op("!=").Nil()).Block(
					jen.Return(jen.Err()),
				),
			}...)
		}
	}

	body = append(body, jen.Return(
		jen.Nil(),
	))

	f.HeaderComment("Code generated by diho_bytes_generate -type " + packetDescr.StructName + " " + filename + "; DO NOT EDIT.")

	f.Func().Params(jen.Id("p").Op("*").Id(packetDescr.StructName)).Id("Decode").Params(
		jen.Id("buf").Index().Byte(), jen.Id("endian").Qual("encoding/binary", "ByteOrder"),
	).Params(
		jen.Error(),
	).Block(body...)

	outputFilename := strings.TrimSuffix(filename, ".go") + "_decode.gen.go"
	if err := f.Save(outputFilename); err != nil {
		log.Fatalf("Failed to save file: %s", err)
	}
}
